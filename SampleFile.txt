SOLID: Design Principle
------

Open Close Principle (OPC):
---------------------------

Software entities like classes, modules and function should be open for extension but closed for modfications.

We can achive it via implement abstract class and concreate class which will extend abastract class.
i.e Template Pattern, Strategy Pattern 


Dependency Inversion Principle(DIP):
------------------------------

High level module should not depend on low level module.both should depend on abstraction.
Abstraction should not depend on details. Details should depends on abatraction.

i.e Factories, Abstract Factories and Inversion of Control Container.


Interface Segregation Principle(ISP):
-------------------------------------
Clients should not be forced to depend upon interfaces that they don't use.




Single Responsibility Principle(SRP):
--------------------------------------

A class should only one reason to change.



Liskov's Substitution Principle:
---------------------------------


Derived types must be completely substitutable for their base types.







